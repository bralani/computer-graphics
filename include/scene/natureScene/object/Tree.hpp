#ifndef TREE_HPP
#define TREE_HPP

#include <vector>
#include <random>
#include <memory>
#include "scene/natureScene/mesh/Tree.hpp"
#include "objects/Object.hpp"
#include "utilities/Input.hpp"

class Tree : public Object
{
public:
  Tree() : Object()
  {
    std::vector<glm::vec3> treePositions = {
      {     0.0f,        0.0f,        0.0f},
      { 4.18763f,  -0.651432f,   20.1525f },
      { 13.4632f,   -0.651432f,   24.0375f },
      { 21.3644f,   -0.651432f,   17.3811f },
      { -3.45353f,   1.45584f,    -4.6198f },
      { -38.7823f,  -1.1229f,    -16.6321f },
      { -89.3342f,  -6.00936f,   -10.2281f },
      { -106.335f,  -1.81602f,   -26.4627f },
      { -85.5568f,   2.39081f,   -58.8270f },
      { -64.0751f,   1.34250f,   -74.9468f },
      { -64.0770f,   4.97035f,   -89.6262f },
      { -25.7499f,   3.63130f,  -109.6710f },
      {   7.74051f,  4.84960f,  -119.6350f },
      {  33.8706f,   2.98033f,  -133.1760f },
      {  60.0745f,   3.09604f,  -137.6280f },
      {  86.6655f,   3.22255f,  -141.7130f },
      { 107.8410f,   3.36253f,  -136.3440f },
      { 119.6850f,   3.08611f,  -125.2840f },
      { 128.4570f,   4.12485f,  -111.5390f },
      { 145.0910f,   1.76543f,   -96.2503f },
      { 162.8590f,   1.72652f,   -80.0770f },
      { 179.4470f,  -1.03545f,   -61.1986f },
      { 192.2530f,  -4.84716f,   -40.8786f },
      { 204.2230f,  -7.71243f,   -14.5638f },
      { 219.0110f,  -5.69319f,     8.8167f },
      { 224.6990f,  -5.05546f,    31.7683f },
      { 223.8560f,  -5.43516f,    56.9680f },
      { 218.2710f,  -7.23669f,    82.0459f },
      { 206.7730f,  -9.06684f,    99.7512f },
      { 196.6100f,  -9.40378f,   118.4220f },
      { 174.9740f, -10.33320f,   143.7840f },
      { 159.2360f,  -9.14406f,   161.5100f },
      { 149.0260f,  -6.51759f,   177.8880f },
      { 138.9810f,  -5.64979f,   189.0920f },
      { 102.0180f,  -9.23880f,   185.2270f },
      {  88.6323f, -11.41610f,   183.9570f },
      {  60.9155f,  -9.69998f,   173.2260f },
      {  38.4915f,  -9.20746f,   172.0340f },
      {  15.0861f,  -7.36057f,   165.2720f },
      {  -1.3683f,  -6.69389f,   166.6550f },
      { -22.4218f,  -6.69389f,   165.3990f },
      { -40.3590f,  -4.52601f,   166.8200f },
      { -63.8707f,  -6.01148f,   139.6460f },
      { -84.7550f,  -5.62268f,   135.3590f },
      { -104.1160f, -5.06814f,   128.7820f },
      { -112.3550f, -5.06814f,   114.9570f },
      { -127.5680f, -7.32556f,   111.3980f },
      { -144.9540f, -8.52922f,    88.0822f },
      { -140.5410f, -9.13355f,    76.3258f },
      { -117.1150f, -9.16043f,    82.9495f },
      { -99.8653f,  -9.16043f,    92.2142f },
      { -87.0655f,  -8.59581f,    99.2693f },
      { -80.8093f,  -7.84321f,   105.0060f },
      { -73.0591f,  -7.84321f,   108.9160f },
      { -60.6505f,  -7.78943f,   110.3910f },
      { -50.3001f,  -7.22862f,   114.0160f },
      { -37.1260f,  -7.22862f,   118.4040f },
      { -23.7280f,  -7.22862f,   119.7680f },
      { -17.5659f,  -6.51950f,   125.3770f },
      {  -7.8178f,  -6.89512f,   131.3580f },
      {   4.2837f,  -7.45456f,   135.5570f },
      {  24.7489f,  -8.30180f,   141.5650f },
      {  34.8020f,  -9.00936f,   142.6340f },
      {  45.4413f,  -9.64370f,   143.2940f },
      {  57.2946f,  -8.84738f,   145.8720f },
      {  69.1962f,  -8.84738f,   142.8280f },
      {  75.2430f,  -9.38960f,   139.7890f },
      {  94.4540f,  -3.22250f,    10.9866f },
      { 135.4470f,  -3.75335f,   -19.3310f },
      { 148.7090f,  -4.16360f,   -38.6774f },
      { 147.3870f,  -0.80243f,   -52.7933f },
      { 143.7050f,   0.76760f,   -60.9813f },
      { 125.8970f,   3.16053f,   -79.5231f },
      { 114.3740f,   7.09182f,   -95.8046f },
      { 108.3890f,   5.99807f,  -105.0520f },
      { 101.0850f,   2.19527f,  -116.3350f },
      {  77.9169f,   0.42889f,  -122.8020f },
      {  66.3763f,   1.22015f,  -124.9260f },
      {  52.2370f,   2.44771f,  -127.5270f },
      {  32.6730f,   3.05149f,  -125.5400f },
      {  22.8470f,   3.48671f,  -122.9150f },
      {  -2.1047f,   0.80990f,  -127.0400f },
      { -11.5498f,   1.51598f,  -130.4010f },
      { -22.1463f,   0.53506f,  -129.2630f },
      { -38.1172f,  -0.91467f,  -123.3800f },
      { -46.8490f,  -0.10495f,  -114.0840f },
      { -47.5994f,   3.12243f,  -103.3540f },
      { -46.0728f,   5.53805f,   -92.1004f },
      { -44.7794f,   3.76293f,   -82.5664f },
      { -47.6823f,   3.12279f,   -69.2662f },
      { -51.3296f,   3.12279f,   -62.0132f },
      { -56.6924f,   3.12279f,   -54.3859f },
      { -58.2509f,   0.37077f,   -45.5172f },
      { -54.8485f,  -1.65913f,   -36.2706f },
      { -51.9291f,  -1.65913f,   -28.3366f },
      { -33.2323f,  -2.01945f,    -6.9723f },
      { -16.7249f,  -2.81602f,    11.1016f },
      { -18.0864f,  -3.75104f,    24.9539f },
      { -46.1505f,  -6.58372f,    20.7980f },
      { -42.5367f,  -7.21255f,   131.9550f },
      { -44.1357f,  -7.21255f,   138.2220f },
      { -45.5469f,  -7.21255f,   143.7520f },
      { -49.5340f,  -7.02777f,   149.9470f },
      { -52.8001f,  -6.36739f,   154.2100f },
      { -58.1363f,  -6.36739f,   157.5640f },
      { -65.1037f,  -5.68584f,   158.5870f },
      { -69.5007f,  -4.54505f,   158.6030f },
      { -75.2893f,  -4.54505f,   157.4670f },
      { -84.3420f,  -6.98780f,   154.6460f },
      { -89.3862f,  -6.98780f,   153.0730f },
      { -95.1923f,  -6.98780f,   151.2640f },
      { -101.3900f, -8.25441f,   149.3320f },
      { -107.1390f, -8.25441f,   147.5400f },
      { -113.1190f, -8.90191f,   145.6760f },
      { -118.8730f, -8.90191f,   143.8820f },
      { -124.4670f, -8.90191f,   142.1380f },
      { -135.1620f, -8.90191f,   132.2000f },
      { -138.2120f, -9.37107f,   126.5620f },
      { -140.6690f, -10.31250f,  122.0220f },
      { -143.2720f, -10.31250f,  117.2110f },
      { -146.3430f, -10.31250f,  111.5350f },
      { -149.3700f,  -9.79246f,  105.9410f },
      { -153.8980f, -10.27860f,   97.8658f }
    };
    
    auto meshes = std::vector<std::shared_ptr<Mesh>>();
    meshes.reserve(treePositions.size() * 2);
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_real_distribution<float> angle_dist(0.0f, 360.0f);
    
    for (const auto& pos : treePositions) {
        auto wood   = std::make_shared<TreeWoodMesh>();
        auto leaves = std::make_shared<TreeLeavesMesh>();
    
        wood  ->transform.setPosition(pos);
        leaves->transform.setPosition(pos);

        float angleY = angle_dist(gen);
        glm::vec3 rotation(0.0f, angleY, 0.0f);

        wood  ->transform.setRotation(rotation);
        leaves->transform.setRotation(rotation);
    
        meshes.push_back(wood);
        meshes.push_back(leaves);
    }

    this->setMeshes(meshes);
  }

};

#endif // TREE_HPP